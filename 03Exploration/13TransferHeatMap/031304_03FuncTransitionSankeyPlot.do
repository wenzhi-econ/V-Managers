/* 
This do file draws Sankey plots for function transitions, separately for LtoL and LtoH workers.
    The data preparation file is "031304_02FuncTransitionSankeyPlot_DataPrep_Counts.py". 
    There are a lot of details related to the data preparation files, as well as further data procedures in this do file.

RA: WWZ 
Time: 2025-02-20
*/

/* 
impt: The "${TempData}/temp_TranFunc_SankeyPlots_Counts.dta" generated by 031304_02 python script file needs to be modified first.
    (1) It calculates the counts of transitions -- I need to get the ratio of transitions within each function.
    (2) It uses 16 different functions -- I need to aggregate some of them into 10 functions.

The function aggregation step is tricky. There are three cases, which need to be considered separately (step-1-2):
    (i) The function at the event time belongs to the seven other functions to be aggregated, but the function after the event does not.
    (ii) The function after the event belongs to the seven other functions to be aggregated, but the function at the event does not.
    (iii) Both the function at the event and the function after the event belong to the seven other functions to be aggregated.

*/



foreach year in 1yr 2yr 3yr 4yr 5yr 6yr 7yr {

    if "`year'" =="1yr" global year_title "1 year"
    if "`year'" =="2yr" global year_title "2 years"
    if "`year'" =="3yr" global year_title "3 years"
    if "`year'" =="4yr" global year_title "4 years"
    if "`year'" =="5yr" global year_title "5 years"
    if "`year'" =="6yr" global year_title "6 years"
    if "`year'" =="7yr" global year_title "7 years"
    
    use "${TempData}/temp_TranFunc_SankeyPlots_Counts.dta", clear 

    *??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??
    *?? step 1. aggregate some functions, then normalized within each function
    *??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??

    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?
    *-? s-1-1. function aggregation
    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?

    sort FuncAtEvent FuncAfterEvent

    foreach var in FuncAtEvent FuncAfterEvent {
        replace `var' = "Others" if `var' == "Audit"
        replace `var' = "Others" if `var' == "Communications"
        replace `var' = "Others" if `var' == "Data and Analytics"
        replace `var' = "Others" if `var' == "Information and Analytics"
        replace `var' = "Others" if `var' == "Legal"
        replace `var' = "Others" if `var' == "Operations"
        replace `var' = "Others" if `var' == "Project Management"
    }

    /* codebook FuncAtEvent
    codebook FuncAfterEvent
        //&? 10 different functions */

    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?
    *-? s-1-2. transition counts aggregation
    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?

    keep FuncAtEvent FuncAfterEvent Counts_`year'_LtoL_All Counts_`year'_LtoH_All

    sort FuncAtEvent FuncAfterEvent
    bysort FuncAtEvent: egen temp1_Counts_`year'_LtoL_All = total(cond(FuncAfterEvent=="Others" & FuncAtEvent!="Others", Counts_`year'_LtoL_All, .))
    bysort FuncAtEvent: egen temp1_Counts_`year'_LtoH_All = total(cond(FuncAfterEvent=="Others" & FuncAtEvent!="Others", Counts_`year'_LtoH_All, .))

    sort FuncAfterEvent FuncAtEvent
    bysort FuncAfterEvent: egen temp2_Counts_`year'_LtoL_All = total(cond(FuncAtEvent=="Others" & FuncAfterEvent!="Others", Counts_`year'_LtoL_All, .))
    bysort FuncAfterEvent: egen temp2_Counts_`year'_LtoH_All = total(cond(FuncAtEvent=="Others" & FuncAfterEvent!="Others", Counts_`year'_LtoH_All, .))

    sort FuncAtEvent FuncAfterEvent
    egen temp3_Counts_`year'_LtoL_All = total(cond(FuncAtEvent=="Others" & FuncAfterEvent=="Others", Counts_`year'_LtoL_All, .))
    egen temp3_Counts_`year'_LtoH_All = total(cond(FuncAtEvent=="Others" & FuncAfterEvent=="Others", Counts_`year'_LtoH_All, .))

    replace Counts_`year'_LtoL_All = temp1_Counts_`year'_LtoL_All if FuncAtEvent!="Others" & FuncAfterEvent=="Others"
    replace Counts_`year'_LtoH_All = temp1_Counts_`year'_LtoH_All if FuncAtEvent!="Others" & FuncAfterEvent=="Others"

    replace Counts_`year'_LtoL_All = temp2_Counts_`year'_LtoL_All if FuncAtEvent=="Others" & FuncAfterEvent!="Others"
    replace Counts_`year'_LtoH_All = temp2_Counts_`year'_LtoH_All if FuncAtEvent=="Others" & FuncAfterEvent!="Others"

    replace Counts_`year'_LtoL_All = temp3_Counts_`year'_LtoL_All if FuncAtEvent=="Others" & FuncAfterEvent=="Others"
    replace Counts_`year'_LtoH_All = temp3_Counts_`year'_LtoH_All if FuncAtEvent=="Others" & FuncAfterEvent=="Others"
    duplicates drop

    tab FuncAtEvent
    tab FuncAfterEvent

    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?
    *-? s-1-3. normalization within each origin function
    *-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?*-?

    foreach var in Counts_`year'_LtoL_All Counts_`year'_LtoH_All {
        bysort FuncAtEvent: egen `var'_sum = total(`var')
        generate `var'_Normalized = `var' / `var'_sum
    }
    keep FuncAtEvent FuncAfterEvent Counts_`year'_LtoL_All_Normalized Counts_`year'_LtoH_All_Normalized
    duplicates drop 

    tab FuncAtEvent
    tab FuncAfterEvent
        //&? each 10 function has the same number of observations 

    foreach var in FuncAtEvent FuncAfterEvent {
        replace `var' = "R&D" if `var' == "Research/Development"
        replace `var' = "HR" if `var' == "Human Resources"
        replace `var' = "IT" if `var' == "Information Technology"
    }

    *??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??
    *?? step 2. plotting
    *??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??*??

    sankey Counts_`year'_LtoL_All_Normalized, ///
        from(FuncAtEvent) to(FuncAfterEvent) ///
        novalues labangle(0) labposition(3) labgap(0) offset(14) ///
        title("Function transitions ${year_title} after the event, LtoL workers")
    graph export "${Results}/Sankey_FuncTran_`year'_LtoL.png", replace as(png)

    sankey Counts_`year'_LtoH_All_Normalized, ///
        from(FuncAtEvent) to(FuncAfterEvent) ///
        novalues labangle(0) labposition(3) labgap(0) offset(14) ///
        title("Function transitions ${year_title} after the event, LtoH workers")
    graph export "${Results}/Sankey_FuncTran_`year'_LtoH.png", replace as(png)

}